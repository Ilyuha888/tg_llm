#!/usr/bin/env python3
"""
Telegram Digester - —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ Telegram-–ø–µ—Ä–µ–ø–∏—Å–æ–∫

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- topic_extractor: –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–º—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å
- topic_resumator_chat: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥—É—é —Ç–µ–º—É
- daily_digester: —Å–æ–∑–¥–∞–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –¥–∞–π–¥–∂–µ—Å—Ç
- custom_date_digester: —Å–æ–∑–¥–∞–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
- orchestrator: –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
"""

import argparse
import datetime as dt
import os
from typing import Optional

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
from dotenv import load_dotenv
import pathlib

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ .env —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
env_path = pathlib.Path(__file__).parent / '.env'
load_dotenv(env_path)

from . import orchestrator
from . import topic_extractor
from . import topic_resumator_chat
from . import daily_digester
from . import custom_date_digester
from . import init_test_data
from . import tg_etl
from . import test_data
import asyncio


def main():
    parser = argparse.ArgumentParser(description="Telegram Digester - –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–æ–∫")
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ process_interval
    interval_parser = subparsers.add_parser('interval', help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç')
    interval_parser.add_argument('--start', type=str, required=True, help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    interval_parser.add_argument('--end', type=str, required=True, help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    interval_parser.add_argument('--channel-id', type=int, help='ID –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Å–µ –∫–∞–Ω–∞–ª—ã)')
    interval_parser.add_argument('--model', type=str, default='yandex', choices=['yandex', 'deepseek'], help='–ú–æ–¥–µ–ª—å LLM')
    interval_parser.add_argument('--verify', type=str, default=str(pathlib.Path(__file__).parent / 'YandexInternalRootCA.pem'), help='–ü—É—Ç—å –∫ CA-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ topic_extractor
    extract_parser = subparsers.add_parser('extract', help='–ò–∑–≤–ª–µ—á—å —Ç–µ–º—ã –∑–∞ –¥–µ–Ω—å')
    extract_parser.add_argument('--date', type=str, required=True, help='–î–∞—Ç–∞ (YYYY-MM-DD)')
    extract_parser.add_argument('--channel-id', type=int, required=True, help='ID –∫–∞–Ω–∞–ª–∞')
    cert_path = str(pathlib.Path(__file__).parent / 'YandexInternalRootCA.pem')
    
    extract_parser.add_argument('--model', type=str, default='yandex', choices=['yandex', 'deepseek'], help='–ú–æ–¥–µ–ª—å LLM')
    extract_parser.add_argument('--verify', type=str, default=cert_path, help='–ü—É—Ç—å –∫ CA-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ topic_resumator
    resume_parser = subparsers.add_parser('resume', help='–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—É')
    resume_parser.add_argument('--topic-id', type=str, required=True, help='ID —Ç–µ–º—ã')
    resume_parser.add_argument('--model', type=str, default='yandex', choices=['yandex', 'deepseek'], help='–ú–æ–¥–µ–ª—å LLM')
    resume_parser.add_argument('--verify', type=str, default=cert_path, help='–ü—É—Ç—å –∫ CA-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ daily_digester
    daily_parser = subparsers.add_parser('daily', help='–°–æ–∑–¥–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π –¥–∞–π–¥–∂–µ—Å—Ç')
    daily_parser.add_argument('--date', type=str, required=True, help='–î–∞—Ç–∞ (YYYY-MM-DD)')
    daily_parser.add_argument('--channel-id', type=int, required=True, help='ID –∫–∞–Ω–∞–ª–∞')
    daily_parser.add_argument('--model', type=str, default='yandex', choices=['yandex', 'deepseek'], help='–ú–æ–¥–µ–ª—å LLM')
    daily_parser.add_argument('--verify', type=str, default=cert_path, help='–ü—É—Ç—å –∫ CA-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ custom_date_digester
    custom_parser = subparsers.add_parser('custom', help='–°–æ–∑–¥–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥')
    custom_parser.add_argument('--start-date', type=str, required=True, help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    custom_parser.add_argument('--end-date', type=str, required=True, help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    custom_parser.add_argument('--channel-id', type=int, required=True, help='ID –∫–∞–Ω–∞–ª–∞')
    custom_parser.add_argument('--model', type=str, default='yandex', choices=['yandex', 'deepseek'], help='–ú–æ–¥–µ–ª—å LLM')
    custom_parser.add_argument('--verify', type=str, default=cert_path, help='–ü—É—Ç—å –∫ CA-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ init-data
    init_parser = subparsers.add_parser('init-data', help='–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ YT')
    init_parser.add_argument('--days-back-start', type=int, default=3, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)')
    init_parser.add_argument('--days-back-end', type=int, default=0, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω—Ü–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0 = —Å–µ–π—á–∞—Å)')
    
    # –ö–æ–º–∞–Ω–¥–∞ dump
    dump_parser = subparsers.add_parser('dump', help='–í—ã–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram —á–∞—Ç–æ–≤')
    dump_parser.add_argument('--chats', nargs='*', help='–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TG_CHATS)')
    dump_parser.add_argument('--output-table', help='–ü—É—Ç—å –∫ —Ç–∞–±–ª–∏—Ü–µ YT –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ YT_MESSAGES_TABLE)')
    dump_parser.add_argument('--days-back-start', type=int, default=3, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)')
    dump_parser.add_argument('--days-back-end', type=int, default=0, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω—Ü–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0 = —Å–µ–π—á–∞—Å)')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    try:
        if args.command == 'interval':
            start_date = dt.datetime.strptime(args.start, '%Y-%m-%d').date()
            end_date = dt.datetime.strptime(args.end, '%Y-%m-%d').date()
            orchestrator.process_interval(
                start=start_date,
                end=end_date,
                channel_id=args.channel_id,
                model=args.model,
                verify=args.verify
            )
            
        elif args.command == 'extract':
            date = dt.datetime.strptime(args.date, '%Y-%m-%d').date()
            topic_extractor.run_topic_extractor(
                date=date,
                channel_id=args.channel_id,
                model=args.model,
                verify=args.verify
            )
            
        elif args.command == 'resume':
            topic_resumator_chat.run_topic_resumator(
                topic_id=args.topic_id,
                model=args.model,
                verify=args.verify
            )
            
        elif args.command == 'daily':
            date = dt.datetime.strptime(args.date, '%Y-%m-%d').date()
            daily_digester.run_daily_digester(
                date=date,
                channel_id=args.channel_id,
                model=args.model,
                verify=args.verify
            )
            
        elif args.command == 'custom':
            start_date = dt.datetime.strptime(args.start_date, '%Y-%m-%d').date()
            end_date = dt.datetime.strptime(args.end_date, '%Y-%m-%d').date()
            custom_date_digester.run_custom_date_digester(
                start_date=start_date,
                end_date=end_date,
                channel_id=args.channel_id,
                model=args.model,
                verify=args.verify
            )
            
        elif args.command == 'init-data':
            init_test_data.init_test_data(
                days_back_start=args.days_back_start,
                days_back_end=args.days_back_end
            )
            
        elif args.command == 'dump':
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            chats = args.chats if args.chats else test_data.TG_CHATS
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            output_table = args.output_table or os.getenv("YT_MESSAGES_TABLE", "//tmp/ia-nartov/hackathon/tg_raw_enriched")
            
            print(f"üîÑ –í—ã–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {len(chats)} —á–∞—Ç–æ–≤...")
            for i, chat in enumerate(chats, 1):
                print(f"  {i}. {chat}")
            
            # –í—ã–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            df_messages = asyncio.run(tg_etl.dump_chats(
                chats,
                days_back_start=args.days_back_start,
                days_back_end=args.days_back_end
            ))
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(df_messages)}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ YT
            print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ YT: {output_table}")
            tg_etl.upload_df_to_yt(
                df_messages,
                output_table,
                test_data.MSG_SCHEMA,
                overwrite=True
            )
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ YT!")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0


if __name__ == '__main__':
    exit(main())