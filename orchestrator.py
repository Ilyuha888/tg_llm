# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import datetime as dt
import os
from typing import List

from . import tg_etl
from . import topic_extractor
from . import topic_resumator_chat


ROOT       = os.getenv("YT_ROOT", "//tmp/ia-nartov/hackathon")
TBL_MSG    = f"{ROOT}/tg_raw_enriched"     # —Å—ã—Ä—å—ë
TBL_TOPICS = f"{ROOT}/daily_topics"        # —Ä–µ–∑—É–ª—å—Ç–∞—Ç topic_extractor


def _channels_with_msgs(start: dt.date, end: dt.date) -> List[int]:
    """–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç list(chat_id), —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ."""
    df = tg_etl.query_yql(
        f"""
        SELECT DISTINCT chat_id
        FROM hahn.`{TBL_MSG}`
        WHERE DateTime::MakeDate(DateTime::ParseIso8601(dttm)) BETWEEN Date("{start}") AND Date("{end}");
        """
    )
    return df["chat_id"].tolist()


def _topic_ids(channel_id: int, day: dt.date) -> List[str]:
    """–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç topic_id-—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ extractor'–æ–º –ø–æ (–∫–∞–Ω–∞–ª,–¥–∞—Ç–∞)."""
    try:
        df = tg_etl.query_yql(
            f"""
            SELECT topic_id
            FROM hahn.`{TBL_TOPICS}`
            WHERE channel_id = {channel_id}
              AND date = "{day}";
            """
        )
        return df["topic_id"].tolist()
    except Exception as e:
        # –¢–∞–±–ª–∏—Ü–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –µ—Å–ª–∏ extractor –Ω–µ —Å–æ–∑–¥–∞–ª —Ç–µ–º
        print(f"‚è≠  –ù–µ—Ç —Ç–∞–±–ª–∏—Ü—ã daily_topics –∏–ª–∏ —Ç–µ–º –¥–ª—è {channel_id} –Ω–∞ {day}: {e}")
        return []


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def process_interval(
    start: dt.date,
    end: dt.date,
    *,
    channel_id: int = None,
    model: str = "yandex",
    verify: bool | str = True,
) -> None:
    """
    –ü—Ä–æ–≥–æ–Ω—ã topic_extractor  ‚ûú  topic_resumator_chat
    –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ (–∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞), –≥–¥–µ –±—ã–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ [start; end] (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).
    """
    if channel_id:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
        channels = [channel_id]
        print(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª {channel_id}")
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        channels = _channels_with_msgs(start, end)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {len(channels)}")
    
    if not channels:
        print("‚è≠  –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –Ω–µ—Ç ‚Äî –¥–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ")
        return

    days = [
        start + dt.timedelta(days=i)
        for i in range((end - start).days + 1)
    ]

    for ch in channels:
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª {ch}")
        for day in days:
            # 1) daily extractor
            try:
                topic_extractor.run_topic_extractor(
                    date=day,
                    channel_id=ch,
                    model=model,
                    verify=verify,
                )
            except Exception as e:
                print(f"‚ö†Ô∏è extractor fail {ch=} {day}: {e}")
                continue

            # 2) resumator –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–µ–º
            topic_ids = _topic_ids(ch, day)
            for tid in topic_ids:
                try:
                    topic_resumator_chat.run_topic_resumator(
                        topic_id=tid,
                        model=model,
                        verify=verify,
                    )
                except Exception as e:
                    print(f"‚ö†Ô∏è resumator fail {tid}: {e}")

    print("‚úÖ interval processing finished")
